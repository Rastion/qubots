{
  "type": "problem",
  "entry_point": "qubot",
  "class_name": "TSPTimeWindowsProblem",
  "default_params": {
    "instance_file": "../tsp/instances/att48.tsp",
    "travel_speed": 1.0,
    "time_penalty": 1000.0
  },
  "metadata": {
    "name": "TSP with Time Windows",
    "description": "Find the shortest tour visiting all cities within their time windows. Each city has an earliest and latest visit time, and violations incur penalties.",
    "domain": "routing",
    "tags": [
      "tsptw",
      "tsp",
      "time_windows",
      "routing",
      "optimization",
      "combinatorial",
      "scheduling",
      "constraints"
    ],
    "difficulty": "advanced",
    "problem_type": "combinatorial"
  },
  "parameters": {
    "instance_file": {
      "type": "string",
      "default": "../tsp/instances/att48.tsp",
      "description": "Path to TSPLIB format instance file",
      "examples": [
        "../tsp/instances/att48.tsp",
        "../tsp/instances/berlin52.tsp",
        "../tsp/instances/gr17.tsp",
        "../tsp/instances/ulysses16.tsp"
      ]
    },
    "time_windows": {
      "type": "array",
      "default": null,
      "description": "List of (earliest, latest) time windows for each city. If null, reasonable defaults are generated.",
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": {
          "type": "number"
        }
      }
    },
    "service_times": {
      "type": "array",
      "default": null,
      "description": "Service time required at each city. If null, defaults to 10.0 for all cities.",
      "items": {
        "type": "number",
        "minimum": 0
      }
    },
    "travel_speed": {
      "type": "number",
      "default": 1.0,
      "minimum": 0.1,
      "maximum": 10.0,
      "description": "Speed factor for travel time calculation (travel_time = distance / speed)"
    },
    "time_penalty": {
      "type": "number",
      "default": 1000.0,
      "minimum": 0,
      "description": "Penalty factor for violating time windows"
    }
  },
  "constraints": [
    "Each city must be visited exactly once",
    "Tour must return to starting city",
    "Cities should be visited within their time windows (soft constraint with penalty)",
    "Travel time between cities affects arrival times"
  ],
  "solution_format": {
    "type": "permutation",
    "description": "List of integers representing city visit order",
    "example": "[0, 3, 1, 4, 2]",
    "validation": [
      "Each city must appear exactly once",
      "Tour length must equal number of cities",
      "All city indices must be valid (0 to n-1)"
    ]
  },
  "objective": {
    "type": "minimization",
    "description": "Minimize total cost (distance + time window violation penalties)",
    "formula": "total_distance + sum(max(0, arrival_time - latest_time) * penalty for each city)"
  },
  "features": [
    "Time window constraints for each city",
    "Configurable travel speed and service times",
    "Penalty-based soft constraints",
    "Detailed time feasibility analysis",
    "Support for all TSPLIB distance types",
    "2-opt neighborhood generation"
  ],
  "requirements": [
    "qubots"
  ]
}
